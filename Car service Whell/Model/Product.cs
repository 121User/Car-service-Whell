//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Car_service_Whell.Model
{
    using System;
    using System.Collections.Generic;
    using System.Linq;


    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.OrderProduct = new HashSet<OrderProduct>();
        }
    
        public string ProductArticleNumber { get; set; }
        public int ProductName { get; set; }
        public string ProductDescription { get; set; }
        public int ProductCategory { get; set; }
        public string ProductImage { get; set; }
        public int ProductManufacturer { get; set; }
        public decimal ProductCost { get; set; }
        public Nullable<byte> ProductDiscountAmount { get; set; }
        public int ProductQuantityInStock { get; set; }
        public string ProductStatus { get; set; }
        public int Unit { get; set; }
        public byte MaxDiscountAmount { get; set; }
        public int Supplier { get; set; }
        public Nullable<int> CountInPack { get; set; }
        public Nullable<int> MinCount { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderProduct> OrderProduct { get; set; }
        public virtual ProductCategory ProductCategory1 { get; set; }
        public virtual ProductManufacturer ProductManufacturer1 { get; set; }
        public virtual ProductName ProductName1 { get; set; }
        public virtual ProductSupplier ProductSupplier { get; set; }
        public virtual ProductUnit ProductUnit { get; set; }


        //Временна переменная количества продуктов в текущем заказе
        public int ProductCountInOrder { get; set; }


        //подсветка товара, у которого скидка больше 15%
        public string Background
        {
            get
            {
                if (this.ProductDiscountAmount > 15)
                    return "#7fff00";
                return "#fff";
            }
        }

        //цена товара без скидки с 2-мя знаками после запятой
        public string ProductCostStr
        {
            get
            {
                decimal cost = this.ProductCost;
                return (Math.Round(cost, 2)).ToString();
            }
            set
            {
                this.ProductCost = decimal.Parse(value);
            }
        }

        //Проверка наличия скидки, для исключения дублирования цен
        public string ProductCostOut
        {
            get
            {
                if (this.ProductCost == decimal.Parse(this.CostWithDiscount)) return "";
                else
                {
                    return this.ProductCostStr;
                }
            }
        }

        //вывод итоговой стоимости товара с учетом скидки
        public string CostWithDiscount
        {
            get
            {
                if (this.ProductDiscountAmount > 0)
                {
                    var costwithDiscount = Convert.ToDouble(this.ProductCost) - Convert.ToDouble(this.ProductCost) * Convert.ToDouble(this.ProductDiscountAmount / 100.00);
                    return (Math.Round(costwithDiscount, 2)).ToString();
                }
                decimal cost = this.ProductCost;
                return (Math.Round(cost, 2)).ToString();
            }
        }

        //получение пути фотографий для товаров
        public string ImgPath
        {
            get
            {
                var path = "pack://application:,,,/Resources/" + this.ProductImage;
                return path;
            }
        }

        Model.Entities bd = Helper.getContex();

        //получение названия продукта
        public string ProductNameStr
        {
            get
            {
                string name = bd.ProductName.Where(productName => productName.ID == this.ProductName).First().Name;
                return name;
            }
        }

        //получение производителя продукта
        public string ProductManufacturerStr
        {
            get
            {
                string manufacturer = bd.ProductManufacturer.Where(productManufacturer => productManufacturer.ID == this.ProductManufacturer).First().Manufacturer;
                return manufacturer;
            }
        }

        //получение единицы измерения продукта
        public string ProductUnitStr
        {
            get
            {
                string unit = bd.ProductUnit.Where(productUnit => productUnit.ID == this.Unit).First().Unit;
                return unit;
            }
        }
    }
}
